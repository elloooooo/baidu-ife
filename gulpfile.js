// Generated by CoffeeScript 1.10.0
(function() {
  var _, approot, coffee, data, distMode, distPath, domain, fs, gulp, gulpLoadPlugins, jade, mkdir, pkg, ref, ref1, routerPath, sourcemaps, stylus, util, wwwroot;

  fs = require('fs');

  gulp = require('gulp');

  mkdir = require('mkdirp');

  data = require('gulp-data');

  gulpLoadPlugins = require('gulp-load-plugins');

  pkg = require('./package.json');

  _ = require('lodash');

  approot = 'app';

  distMode = 'dev';

  domain = '//static.xiaojukeji.com';

  ref = {
    routerPath: pkg.routerPath,
    distPath: approot + "/" + distMode
  }, routerPath = ref.routerPath, distPath = ref.distPath;

  console.log("pkg.routerPath", pkg.routerPath);

  ref1 = gulpLoadPlugins({
    pattern: 'gulp-*',
    scope: ['dependencies'],
    replaceString: 'gulp-',
    camelize: true,
    lazy: true
  }), util = ref1.util, jade = ref1.jade, stylus = ref1.stylus, coffee = ref1.coffee, sourcemaps = ref1.sourcemaps;

  wwwroot = domain + routerPath;

  gulp.task('init', function(cb) {
    var doc, i, img, len, mock, val, vender;
    jade = approot + '/src/jade';
    stylus = approot + '/src/stylus';
    coffee = approot + '/src/coffee';
    vender = approot + '/src/vender';
    img = approot + '/src/img';
    mock = approot + '/mock/';
    doc = [jade + "/layout", jade + "/module", stylus + "/module", stylus + "/font", coffee + "/lib", coffee + "/module", "" + vender, "" + img, "" + mock];
    for (i = 0, len = doc.length; i < len; i++) {
      val = doc[i];
      mkdir.sync(val);
    }
    return cb();
  });

  gulp.task('setDev', [], function() {
    distMode = 'dev';
    return distPath = approot + '/' + distMode;
  });

  gulp.task('jade', function() {
    var LOCALS;
    LOCALS = {
      wwwroot: wwwroot
    };
    return gulp.src([approot + '/src/jade/**/*.jade', '!' + approot + '/src/jade/layout/*.*', '!' + approot + '/src/jade/module/**/*.jade']).pipe(data(function(file) {
      var $CONFIG, _data;
      $CONFIG = file.path.replace(/\.jade/, '\_$config\.json');
      if (fs.existsSync($CONFIG)) {
        _data = _.assign({}, JSON.parse(fs.readFileSync($CONFIG)), LOCALS);
        return _data;
      } else {
        _data = _.assign({}, {}, LOCALS);
        return _data;
      }
    })).pipe(jade({
      pretty: true
    })).pipe(gulp.dest(distPath + '/html/'));
  });

  gulp.task('stylus', function() {
    var isCompress;
    isCompress = distMode === 'dist';
    console.log('is Compress mode : ', isCompress);
    return gulp.src([approot + '/src/stylus/**/*.styl', '!' + approot + '/src/stylus/module/**/*.styl']).pipe(sourcemaps.init()).pipe(stylus({
      compress: isCompress
    })).pipe(sourcemaps.write('.maps')).pipe(gulp.dest(distPath + '/css/'));
  });

  gulp.task('coffee', function() {
    gulp.src([approot + '/src/coffee/**/*.coffee', '!' + approot + '/src/coffee/module/**/*.coffee']).pipe(sourcemaps.init()).pipe(coffee({
      bare: true
    })).on('error', util.log).pipe(sourcemaps.write('.maps')).pipe(gulp.dest(distPath + '/js/'));
    return gulp.src(approot + '/src/coffee/**/*.js').pipe(gulp.dest(distPath + '/js'));
  });

  gulp.task('cpVender', function() {
    return gulp.src(approot + '/src/vender/**/*.*').pipe(gulp.dest(distPath + '/vender'));
  });

  gulp.task('cpImg', function() {
    return gulp.src(approot + '/src/img/**/*.*').pipe(gulp.dest(distPath + '/img'));
  });

  gulp.task('compile', ['jade', 'stylus', 'coffee', 'cpVender', 'cpImg']);

  gulp.task('dev', ['setDev', 'compile']);

  gulp.task('default', ['init']);

}).call(this);

//# sourceMappingURL=gulpfile.js.map
